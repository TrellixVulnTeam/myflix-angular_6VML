{"ast":null,"code":"import { catchError } from 'rxjs/internal/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst apiUrl = 'https://flixinfo.herokuapp.com/'; //User Registration\n\n/**\n   * API call to the user registration endpoint.\n   * @param userDetails User name, password, email and date of birth.\n   */\n\nexport let UserRegistrationService = /*#__PURE__*/(() => {\n  class UserRegistrationService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    userRegistration(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Some error occurskyblue:', error.error.message);\n      } else {\n        console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n  }\n\n  UserRegistrationService.ɵfac = function UserRegistrationService_Factory(t) {\n    return new (t || UserRegistrationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserRegistrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserRegistrationService,\n    factory: UserRegistrationService.ɵfac,\n    providedIn: 'root'\n  }); //User Login\n\n  /**\n    * API call to the user login endpoint.\n    * @param username Username of type string.\n    * @param password Password of type string.\n    * @returns object with username and bearer token\n    */\n\n  return UserRegistrationService;\n})();\nexport let UserLoginService = /*#__PURE__*/(() => {\n  class UserLoginService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    userLogin(userDetails) {\n      console.log(userDetails);\n      return this.http.post(apiUrl + 'login', userDetails).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurskyblue: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  UserLoginService.ɵfac = function UserLoginService_Factory(t) {\n    return new (t || UserLoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserLoginService,\n    factory: UserLoginService.ɵfac,\n    providedIn: 'root'\n  }); // Get all movies\n\n  /**\n     * API call to the movies endpoint.\n     * @returns array of movie objects.\n     */\n\n  return UserLoginService;\n})();\nexport let GetAllMoviesService = /*#__PURE__*/(() => {\n  class GetAllMoviesService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      console.log(res);\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurskyblue: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  GetAllMoviesService.ɵfac = function GetAllMoviesService_Factory(t) {\n    return new (t || GetAllMoviesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GetAllMoviesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetAllMoviesService,\n    factory: GetAllMoviesService.ɵfac,\n    providedIn: 'root'\n  }); //Get one movie\n\n  /**\n     * API call to a single movie endpoint.\n     * @params movie title of type string.\n     * @returns movie object.\n     */\n\n  return GetAllMoviesService;\n})();\nexport let GetOneMovieService = /*#__PURE__*/(() => {\n  class GetOneMovieService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/:Title', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      console.log(res);\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurskyblue: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  GetOneMovieService.ɵfac = function GetOneMovieService_Factory(t) {\n    return new (t || GetOneMovieService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GetOneMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetOneMovieService,\n    factory: GetOneMovieService.ɵfac,\n    providedIn: 'root'\n  }); //Get director\n\n  /**\n     * API call to the director name endpoint.\n     * @param directorName name of movie director of type string.\n     * @returns director object.\n     */\n\n  return GetOneMovieService;\n})();\nexport let GetDirectorService = /*#__PURE__*/(() => {\n  class GetDirectorService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/directors/:Name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      console.log(res);\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurskyblue: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  GetDirectorService.ɵfac = function GetDirectorService_Factory(t) {\n    return new (t || GetDirectorService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GetDirectorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetDirectorService,\n    factory: GetDirectorService.ɵfac,\n    providedIn: 'root'\n  }); //Get genre\n\n  /**\n     * API call to the genre name endpoint.\n     * @param genre name of genre of type string.\n     * @returns genre object.\n     */\n\n  return GetDirectorService;\n})();\nexport let GetGenreService = /*#__PURE__*/(() => {\n  class GetGenreService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getAllMovies() {\n      const token = localStorage.getItem('token');\n      return this.http.get(apiUrl + 'movies/genres/:Name', {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    } // non-typed response extraction\n\n\n    extractResponseData(res) {\n      console.log(res);\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurskyblue: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  GetGenreService.ɵfac = function GetGenreService_Factory(t) {\n    return new (t || GetGenreService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GetGenreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GetGenreService,\n    factory: GetGenreService.ɵfac,\n    providedIn: 'root'\n  }); //Add a movie to favourite Movies\n\n  /**\n   * API call to the movie ID endpoint\n   * in order to add the movie ID to the FavoriteMovies array in the user object.\n   * @param movieID of type string.\n   */\n\n  return GetGenreService;\n})();\nexport let AddFavouriteMovieService = /*#__PURE__*/(() => {\n  class AddFavouriteMovieService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    addFavouriteMovie(id) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.post(`${apiUrl}users/${user}/favourites/${id}`, id, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurskyblue: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  AddFavouriteMovieService.ɵfac = function AddFavouriteMovieService_Factory(t) {\n    return new (t || AddFavouriteMovieService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AddFavouriteMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddFavouriteMovieService,\n    factory: AddFavouriteMovieService.ɵfac,\n    providedIn: 'root'\n  }); //Edit user\n\n  /**\n     * API call to the User endpoint\n     * in order to edit the user data.\n     * @param userDetails object of user name, password, email and date of birth.\n     * @returns user object.\n     */\n\n  return AddFavouriteMovieService;\n})();\nexport let EditUserService = /*#__PURE__*/(() => {\n  class EditUserService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    editUser(userDetails) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.put(`${apiUrl}users/${user}`, userDetails, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurskyblue: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  EditUserService.ɵfac = function EditUserService_Factory(t) {\n    return new (t || EditUserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EditUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EditUserService,\n    factory: EditUserService.ɵfac,\n    providedIn: 'root'\n  }); //Delete user\n\n  /**\n   * API call to the User endpoint\n   * in order to delete the user data.\n   * @returns user object.\n   */\n\n  return EditUserService;\n})();\nexport let DeleteUserService = /*#__PURE__*/(() => {\n  class DeleteUserService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    deleteUser() {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.delete(`${apiUrl}users/${user}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        }),\n        responseType: 'text'\n      }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurskyblue: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  DeleteUserService.ɵfac = function DeleteUserService_Factory(t) {\n    return new (t || DeleteUserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DeleteUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeleteUserService,\n    factory: DeleteUserService.ɵfac,\n    providedIn: 'root'\n  }); //Delete a movie from the favorite movies\n\n  /**\n   * API call to the movie ID endpoint\n   * in order to delete the movie ID from the FavoriteMovies array in the user object.\n   * @param movieID of type string.\n   */\n\n  return DeleteUserService;\n})();\nexport let DeleteFavouriteMovieService = /*#__PURE__*/(() => {\n  class DeleteFavouriteMovieService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    deleteFavouriteMovie(id) {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('user');\n      return this.http.delete(`${apiUrl}users/${user}/favourites/${id}`, {\n        headers: new HttpHeaders({\n          Authorization: 'Bearer ' + token\n        })\n      }).pipe(catchError(this.handleError));\n    }\n\n    extractResponseData(res) {\n      const body = res;\n      return body || {};\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurskyblue: ', error.error.message);\n      } else {\n        console.error(`Error status code ${error.status}, ` + `Error body is ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later');\n    }\n\n  }\n\n  DeleteFavouriteMovieService.ɵfac = function DeleteFavouriteMovieService_Factory(t) {\n    return new (t || DeleteFavouriteMovieService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DeleteFavouriteMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeleteFavouriteMovieService,\n    factory: DeleteFavouriteMovieService.ɵfac,\n    providedIn: 'root'\n  });\n  return DeleteFavouriteMovieService;\n})();","map":null,"metadata":{},"sourceType":"module"}